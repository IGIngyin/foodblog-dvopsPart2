function cov_582o2f237(){var path="C:\\Users\\tashi\\OneDrive\\Desktop\\dvops-part2\\foodblog-dvops-part2\\utils\\UserComments.js";var hash="8e15e62d144e521f4b380e77e9ca278306f3d4c3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\tashi\\OneDrive\\Desktop\\dvops-part2\\foodblog-dvops-part2\\utils\\UserComments.js",statementMap:{"0":{start:{line:144,column:11},end:{line:144,column:33}},"1":{start:{line:145,column:13},end:{line:145,column:28}},"2":{start:{line:146,column:23},end:{line:146,column:38}},"3":{start:{line:148,column:25},end:{line:148,column:62}},"4":{start:{line:149,column:26},end:{line:149,column:64}},"5":{start:{line:150,column:28},end:{line:150,column:68}},"6":{start:{line:152,column:19},end:{line:152,column:29}},"7":{start:{line:153,column:4},end:{line:165,column:5}},"8":{start:{line:154,column:22},end:{line:154,column:55}},"9":{start:{line:155,column:21},end:{line:155,column:51}},"10":{start:{line:155,column:39},end:{line:155,column:50}},"11":{start:{line:157,column:8},end:{line:161,column:9}},"12":{start:{line:158,column:12},end:{line:158,column:39}},"13":{start:{line:160,column:12},end:{line:160,column:65}},"14":{start:{line:163,column:8},end:{line:163,column:61}},"15":{start:{line:164,column:8},end:{line:164,column:68}},"16":{start:{line:170,column:4},end:{line:176,column:5}},"17":{start:{line:171,column:21},end:{line:171,column:67}},"18":{start:{line:172,column:8},end:{line:172,column:32}},"19":{start:{line:174,column:8},end:{line:174,column:60}},"20":{start:{line:175,column:8},end:{line:175,column:18}},"21":{start:{line:181,column:4},end:{line:191,column:5}},"22":{start:{line:182,column:21},end:{line:182,column:56}},"23":{start:{line:183,column:8},end:{line:183,column:32}},"24":{start:{line:185,column:8},end:{line:189,column:9}},"25":{start:{line:186,column:12},end:{line:186,column:70}},"26":{start:{line:187,column:12},end:{line:187,column:78}},"27":{start:{line:188,column:12},end:{line:188,column:22}},"28":{start:{line:190,column:8},end:{line:190,column:20}},"29":{start:{line:196,column:4},end:{line:201,column:5}},"30":{start:{line:197,column:8},end:{line:197,column:76}},"31":{start:{line:199,column:8},end:{line:199,column:67}},"32":{start:{line:200,column:8},end:{line:200,column:20}},"33":{start:{line:205,column:24},end:{line:205,column:47}},"34":{start:{line:206,column:18},end:{line:206,column:99}},"35":{start:{line:207,column:4},end:{line:207,column:28}},"36":{start:{line:212,column:19},end:{line:212,column:29}},"37":{start:{line:213,column:21},end:{line:213,column:29}},"38":{start:{line:215,column:31},end:{line:215,column:34}},"39":{start:{line:217,column:4},end:{line:263,column:5}},"40":{start:{line:219,column:22},end:{line:219,column:55}},"41":{start:{line:220,column:27},end:{line:220,column:63}},"42":{start:{line:220,column:48},end:{line:220,column:62}},"43":{start:{line:221,column:8},end:{line:223,column:9}},"44":{start:{line:222,column:12},end:{line:222,column:80}},"45":{start:{line:226,column:8},end:{line:228,column:9}},"46":{start:{line:227,column:12},end:{line:227,column:81}},"47":{start:{line:231,column:8},end:{line:236,column:9}},"48":{start:{line:232,column:12},end:{line:232,column:66}},"49":{start:{line:233,column:12},end:{line:235,column:15}},"50":{start:{line:239,column:8},end:{line:243,column:9}},"51":{start:{line:240,column:12},end:{line:242,column:15}},"52":{start:{line:246,column:25},end:{line:246,column:57}},"53":{start:{line:247,column:8},end:{line:247,column:45}},"54":{start:{line:247,column:27},end:{line:247,column:45}},"55":{start:{line:248,column:27},end:{line:252,column:9}},"56":{start:{line:253,column:8},end:{line:253,column:38}},"57":{start:{line:254,column:8},end:{line:254,column:52}},"58":{start:{line:256,column:8},end:{line:259,column:11}},"59":{start:{line:261,column:8},end:{line:261,column:54}},"60":{start:{line:262,column:8},end:{line:262,column:75}},"61":{start:{line:268,column:19},end:{line:268,column:29}},"62":{start:{line:270,column:4},end:{line:279,column:5}},"63":{start:{line:271,column:25},end:{line:271,column:57}},"64":{start:{line:272,column:8},end:{line:274,column:9}},"65":{start:{line:273,column:12},end:{line:273,column:89}},"66":{start:{line:275,column:8},end:{line:275,column:50}},"67":{start:{line:277,column:8},end:{line:277,column:57}},"68":{start:{line:278,column:8},end:{line:278,column:75}},"69":{start:{line:282,column:0},end:{line:286,column:2}}},fnMap:{"0":{name:"getPostById",decl:{start:{line:151,column:15},end:{line:151,column:26}},loc:{start:{line:151,column:37},end:{line:166,column:1}},line:151},"1":{name:"(anonymous_1)",decl:{start:{line:155,column:32},end:{line:155,column:33}},loc:{start:{line:155,column:39},end:{line:155,column:50}},line:155},"2":{name:"loadBannedWords",decl:{start:{line:169,column:15},end:{line:169,column:30}},loc:{start:{line:169,column:33},end:{line:177,column:1}},line:169},"3":{name:"readJSON",decl:{start:{line:180,column:15},end:{line:180,column:23}},loc:{start:{line:180,column:34},end:{line:192,column:1}},line:180},"4":{name:"writeJSON",decl:{start:{line:195,column:15},end:{line:195,column:24}},loc:{start:{line:195,column:41},end:{line:202,column:1}},line:195},"5":{name:"containsBannedWords",decl:{start:{line:204,column:15},end:{line:204,column:34}},loc:{start:{line:204,column:41},end:{line:208,column:1}},line:204},"6":{name:"addComment",decl:{start:{line:211,column:15},end:{line:211,column:25}},loc:{start:{line:211,column:36},end:{line:264,column:1}},line:211},"7":{name:"(anonymous_7)",decl:{start:{line:220,column:38},end:{line:220,column:39}},loc:{start:{line:220,column:48},end:{line:220,column:62}},line:220},"8":{name:"getComments",decl:{start:{line:267,column:15},end:{line:267,column:26}},loc:{start:{line:267,column:37},end:{line:280,column:1}},line:267}},branchMap:{"0":{loc:{start:{line:157,column:8},end:{line:161,column:9}},type:"if",locations:[{start:{line:157,column:8},end:{line:161,column:9}},{start:{line:159,column:15},end:{line:161,column:9}}],line:157},"1":{loc:{start:{line:185,column:8},end:{line:189,column:9}},type:"if",locations:[{start:{line:185,column:8},end:{line:189,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:185},"2":{loc:{start:{line:221,column:8},end:{line:223,column:9}},type:"if",locations:[{start:{line:221,column:8},end:{line:223,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:221},"3":{loc:{start:{line:226,column:8},end:{line:228,column:9}},type:"if",locations:[{start:{line:226,column:8},end:{line:228,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:226},"4":{loc:{start:{line:226,column:12},end:{line:226,column:39}},type:"binary-expr",locations:[{start:{line:226,column:12},end:{line:226,column:17}},{start:{line:226,column:21},end:{line:226,column:39}}],line:226},"5":{loc:{start:{line:231,column:8},end:{line:236,column:9}},type:"if",locations:[{start:{line:231,column:8},end:{line:236,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:231},"6":{loc:{start:{line:239,column:8},end:{line:243,column:9}},type:"if",locations:[{start:{line:239,column:8},end:{line:243,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:239},"7":{loc:{start:{line:247,column:8},end:{line:247,column:45}},type:"if",locations:[{start:{line:247,column:8},end:{line:247,column:45}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:247},"8":{loc:{start:{line:272,column:8},end:{line:274,column:9}},type:"if",locations:[{start:{line:272,column:8},end:{line:274,column:9}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:272},"9":{loc:{start:{line:272,column:12},end:{line:272,column:54}},type:"binary-expr",locations:[{start:{line:272,column:12},end:{line:272,column:25}},{start:{line:272,column:29},end:{line:272,column:54}}],line:272}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8e15e62d144e521f4b380e77e9ca278306f3d4c3"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_582o2f237=function(){return actualCoverage;};}return actualCoverage;}cov_582o2f237();// const chai = require("chai");
// const chaiHttp = require("chai-http");
// const { app, server } = require("../index");
// const { expect } = chai;
// const fs = require("fs");
// const path = require("path");
// chai.use(chaiHttp);
// let baseUrl;
// let validPostIds = []; // Store valid post IDs
// const invalidPostId = "invalidID"; // A static invalid ID for testing
// describe("UserComments API", () => {
//     before(async () => {
//         // Validate server instance
//         if (!server || !server.address) {
//             throw new Error("Server is not running or improperly initialized.");
//         }
//         const { address, port } = server.address();
//         baseUrl = `http://${address === "::" ? "localhost" : address}:${port}`;
//         // Load valid post IDs from foodblogs.json
//         const filePath = path.join(__dirname, "../utils/foodblogs.json");
//         const foodblogs = JSON.parse(fs.readFileSync(filePath, "utf-8"));
//         validPostIds = foodblogs.map((post) => post.id);
//     });
//     after(() => {
//         // Validate server close
//         if (server && typeof server.close === "function") {
//             return new Promise((resolve) => {
//                 server.close(() => resolve());
//             });
//         } else {
//             throw new Error("Server cannot be closed.");
//         }
//     });
//     describe("POST /add-comment/:id", () => {
//         it("should add a new comment successfully", (done) => {
//             chai.request(baseUrl)
//                 .post(`/add-comment/${validPostIds[0]}`) // Use the first valid ID
//                 .send({ text: "This is a valid comment." })
//                 .end((err, res) => {
//                     expect(res).to.have.status(201);
//                     expect(res.body.message).to.equal("Comment added successfully.");
//                     done();
//                 });
//         });
//         it("should return 400 for inappropriate language", (done) => {
//             chai.request(baseUrl)
//                 .post(`/add-comment/${validPostIds[0]}`) // Use the first valid ID
//                 .send({ text: "This comment contains asshole." })
//                 .end((err, res) => {
//                     expect(res).to.have.status(400);
//                     expect(res.body.message).to.equal("Your comment contains inappropriate language.");
//                     done();
//                 });
//         });
//         it("should return 400 for empty comment", (done) => {
//             chai.request(baseUrl)
//                 .post(`/add-comment/${validPostIds[0]}`) // Use the first valid ID
//                 .send({ text: "" })
//                 .end((err, res) => {
//                     expect(res).to.have.status(400);
//                     expect(res.body.message).to.equal("Comment cannot be empty.");
//                     done();
//                 });
//         });
//         it("should return 404 for a non-existent post ID", (done) => {
//             chai.request(baseUrl)
//                 .post(`/add-comment/${invalidPostId}`)
//                 .send({ text: "Valid comment text" })
//                 .end((err, res) => {
//                     expect(res).to.have.status(404);
//                     expect(res.body.message).to.equal("Post ID does not exist.");
//                     done();
//                 });
//         });
//         it("should return 400 for a comment exceeding max length", (done) => {
//             const longComment = "a".repeat(201); // 201 characters
//             chai.request(baseUrl)
//                 .post(`/add-comment/${validPostIds[0]}`) // Use the first valid ID
//                 .send({ text: longComment })
//                 .end((err, res) => {
//                     expect(res).to.have.status(400);
//                     expect(res.body.message).to.include("exceeds maximum allowed length");
//                     done();
//                 });
//         });
//     });
//     describe("GET /get-comments/:id", () => {
//         it("should retrieve comments for a valid post ID", (done) => {
//             chai.request(baseUrl)
//                 .get(`/get-comments/${validPostIds[0]}`) // Use the first valid ID
//                 .end((err, res) => {
//                     expect(res).to.have.status(200);
//                     expect(res.body).to.be.an("array");
//                     done();
//                 });
//         });
//         it("should return 404 for a post with no comments", (done) => {
//             chai.request(baseUrl)
//                 .get(`/get-comments/${validPostIds[1]}`) // Use another valid ID
//                 .end((err, res) => {
//                     expect(res).to.have.status(404);
//                     expect(res.body.message).to.equal("No comments found for this post.");
//                     done();
//                 });
//         });
//     });
//     describe("GET /get-post/:id", () => {
//         it("should return the post for a valid ID", (done) => {
//             chai.request(baseUrl)
//                 .get(`/get-post/${validPostIds[0]}`) // Use the first valid ID
//                 .end((err, res) => {
//                     expect(res).to.have.status(200);
//                     expect(res.body).to.be.an("object");
//                     done();
//                 });
//         });
//         it("should return 404 for a non-existing post ID", (done) => {
//             chai.request(baseUrl)
//                 .get(`/get-post/${invalidPostId}`)
//                 .end((err, res) => {
//                     expect(res).to.have.status(404);
//                     expect(res.body.message).to.equal("Post not found.");
//                     done();
//                 });
//         });
//     });
// });
const fs=(cov_582o2f237().s[0]++,require("fs").promises);const path=(cov_582o2f237().s[1]++,require("path"));const{v4:uuidv4}=(cov_582o2f237().s[2]++,require("uuid"));const commentsFilePath=(cov_582o2f237().s[3]++,path.join(__dirname,"comments.json"));const foodblogsFilePath=(cov_582o2f237().s[4]++,path.join(__dirname,"foodblogs.json"));const bannedWordsFilePath=(cov_582o2f237().s[5]++,path.join(__dirname,"bannedWords.json"));async function getPostById(req,res){cov_582o2f237().f[0]++;const{id}=(cov_582o2f237().s[6]++,req.params);cov_582o2f237().s[7]++;try{const posts=(cov_582o2f237().s[8]++,await readJSON(foodblogsFilePath));const post=(cov_582o2f237().s[9]++,posts.find(p=>{cov_582o2f237().f[1]++;cov_582o2f237().s[10]++;return p.id===id;}));cov_582o2f237().s[11]++;if(post){cov_582o2f237().b[0][0]++;cov_582o2f237().s[12]++;res.status(200).json(post);}else{cov_582o2f237().b[0][1]++;cov_582o2f237().s[13]++;res.status(404).json({message:"Post not found."});}}catch(error){cov_582o2f237().s[14]++;console.error("Error retrieving post by ID:",error);cov_582o2f237().s[15]++;res.status(500).json({message:"Internal server error."});}}// Load banned words dynamically from JSON
async function loadBannedWords(){cov_582o2f237().f[2]++;cov_582o2f237().s[16]++;try{const data=(cov_582o2f237().s[17]++,await fs.readFile(bannedWordsFilePath,"utf8"));cov_582o2f237().s[18]++;return JSON.parse(data);}catch(error){cov_582o2f237().s[19]++;console.error("Error loading banned words:",error);cov_582o2f237().s[20]++;return[];// Return an empty list if the file cannot be read
}}// Utility to read JSON files
async function readJSON(filePath){cov_582o2f237().f[3]++;cov_582o2f237().s[21]++;try{const data=(cov_582o2f237().s[22]++,await fs.readFile(filePath,"utf8"));cov_582o2f237().s[23]++;return JSON.parse(data);}catch(error){cov_582o2f237().s[24]++;if(error.code==="ENOENT"){cov_582o2f237().b[1][0]++;cov_582o2f237().s[25]++;console.warn(`File ${filePath} not found. Initializing.`);cov_582o2f237().s[26]++;await fs.writeFile(filePath,JSON.stringify({},null,2),"utf8");cov_582o2f237().s[27]++;return{};// Return an empty object
}else{cov_582o2f237().b[1][1]++;}cov_582o2f237().s[28]++;throw error;}}// Utility to write JSON files
async function writeJSON(filePath,data){cov_582o2f237().f[4]++;cov_582o2f237().s[29]++;try{cov_582o2f237().s[30]++;await fs.writeFile(filePath,JSON.stringify(data,null,2),"utf8");}catch(error){cov_582o2f237().s[31]++;console.error(`Error writing to file ${filePath}:`,error);cov_582o2f237().s[32]++;throw error;}}async function containsBannedWords(text){cov_582o2f237().f[5]++;const bannedWords=(cov_582o2f237().s[33]++,await loadBannedWords());const regex=(cov_582o2f237().s[34]++,new RegExp(`\\b(${bannedWords.join("|")})\\b|\\W(${bannedWords.join("|")})`,"i"));cov_582o2f237().s[35]++;return regex.test(text);}async function addComment(req,res){cov_582o2f237().f[6]++;const{id}=(cov_582o2f237().s[36]++,req.params);const{text}=(cov_582o2f237().s[37]++,req.body);const MAX_COMMENT_LENGTH=(cov_582o2f237().s[38]++,200);cov_582o2f237().s[39]++;try{// Validate post ID
const posts=(cov_582o2f237().s[40]++,await readJSON(foodblogsFilePath));const postExists=(cov_582o2f237().s[41]++,posts.some(post=>{cov_582o2f237().f[7]++;cov_582o2f237().s[42]++;return post.id===id;}));cov_582o2f237().s[43]++;if(!postExists){cov_582o2f237().b[2][0]++;cov_582o2f237().s[44]++;return res.status(404).json({message:"Post ID does not exist."});}else{cov_582o2f237().b[2][1]++;}// Validate empty or missing comment
cov_582o2f237().s[45]++;if((cov_582o2f237().b[4][0]++,!text)||(cov_582o2f237().b[4][1]++,text.trim()==="")){cov_582o2f237().b[3][0]++;cov_582o2f237().s[46]++;return res.status(400).json({message:"Comment cannot be empty."});}else{cov_582o2f237().b[3][1]++;}// Validate inappropriate language
cov_582o2f237().s[47]++;if(await containsBannedWords(text)){cov_582o2f237().b[5][0]++;cov_582o2f237().s[48]++;console.log("Banned word detected in comment:",text);cov_582o2f237().s[49]++;return res.status(400).json({message:"Your comment contains inappropriate language."});}else{cov_582o2f237().b[5][1]++;}// Validate comment length
cov_582o2f237().s[50]++;if(text.length>MAX_COMMENT_LENGTH){cov_582o2f237().b[6][0]++;cov_582o2f237().s[51]++;return res.status(400).json({message:`Comment exceeds maximum allowed length of ${MAX_COMMENT_LENGTH} characters.`});}else{cov_582o2f237().b[6][1]++;}// Add comment to JSON
const comments=(cov_582o2f237().s[52]++,await readJSON(commentsFilePath));cov_582o2f237().s[53]++;if(!comments[id]){cov_582o2f237().b[7][0]++;cov_582o2f237().s[54]++;comments[id]=[];}else{cov_582o2f237().b[7][1]++;}const newComment=(cov_582o2f237().s[55]++,{id:uuidv4(),text,timestamp:new Date().toISOString()});cov_582o2f237().s[56]++;comments[id].push(newComment);cov_582o2f237().s[57]++;await writeJSON(commentsFilePath,comments);cov_582o2f237().s[58]++;return res.status(201).json({message:"Comment added successfully.",comment:newComment});}catch(error){cov_582o2f237().s[59]++;console.error("Error adding comment:",error);cov_582o2f237().s[60]++;return res.status(500).json({message:"Internal server error."});}}// Get comments for a post
async function getComments(req,res){cov_582o2f237().f[8]++;const{id}=(cov_582o2f237().s[61]++,req.params);cov_582o2f237().s[62]++;try{const comments=(cov_582o2f237().s[63]++,await readJSON(commentsFilePath));cov_582o2f237().s[64]++;if((cov_582o2f237().b[9][0]++,!comments[id])||(cov_582o2f237().b[9][1]++,comments[id].length===0)){cov_582o2f237().b[8][0]++;cov_582o2f237().s[65]++;return res.status(404).json({message:"No comments found for this post."});}else{cov_582o2f237().b[8][1]++;}cov_582o2f237().s[66]++;return res.status(200).json(comments[id]);}catch(error){cov_582o2f237().s[67]++;console.error("Error fetching comments:",error);cov_582o2f237().s[68]++;return res.status(500).json({message:"Internal server error."});}}cov_582o2f237().s[69]++;module.exports={getPostById,getComments,addComment};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,